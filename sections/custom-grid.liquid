{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid"
    }
  ]
}
{% endschema %}

<div class="custom-grid">
  {% for block in section.blocks %}
    {% assign product = all_products[block.settings.product] %}
    {% if product %}
      <div class="grid-item" data-product-handle="{{ product.handle }}">
        <img src="{{ product.featured_image | img_url: '400x' }}" alt="{{ product.title }}">
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
        <button class="open-popup" data-handle="{{ product.handle }}">View Details</button>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="product-popup" class="popup-overlay hidden">
  <div class="popup-content">
    <span id="close-popup">&times;</span>
    <div id="popup-details">
      <!-- Product details load dynamically here -->
    </div>
  </div>
</div>

<style>
.custom-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}
.grid-item {
  text-align: center;
  background: #f8f8f8;
  padding: 15px;
  border-radius: 12px;
}
.grid-item img {
  width: 100%;
  border-radius: 8px;
}
.popup-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.popup-content {
  background: #fff;
  padding: 20px;
  border-radius: 12px;
  max-width: 600px;
  width: 100%;
}
#close-popup {
  float: right;
  font-size: 24px;
  cursor: pointer;
}
.hidden { display: none; }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("product-popup");
  const popupDetails = document.getElementById("popup-details");
  const closeBtn = document.getElementById("close-popup");

  // Open popup
  document.querySelectorAll(".open-popup").forEach(btn => {
    btn.addEventListener("click", async () => {
      const handle = btn.dataset.handle;

      // Fetch product JSON
      const response = await fetch(`/products/${handle}.js`);
      const product = await response.json();

      // Build popup HTML
      let variantsHTML = "";
      product.options.forEach((option, i) => {
        variantsHTML += `
          <label>${option.name}</label>
          <select id="option-${i}">
            ${option.values.map(v => `<option value="${v}">${v}</option>`).join("")}
          </select>
        `;
      });

      popupDetails.innerHTML = `
        <h2>${product.title}</h2>
        <p><strong>Price:</strong> ${ (product.price/100).toFixed(2) } ${Shopify.currency.active}</p>
        <p>${product.description}</p>
        ${variantsHTML}
        <label>Quantity</label>
        <input type="number" id="quantity" value="1" min="1">
        <button id="add-to-cart" data-id="${product.variants[0].id}">Add to Cart</button>
      `;

      // Show popup
      popup.classList.remove("hidden");

      // Add to cart functionality
      document.getElementById("add-to-cart").addEventListener("click", async () => {
        const qty = document.getElementById("quantity").value;
        let selectedOptions = [];
        product.options.forEach((opt, i) => {
          selectedOptions.push(document.getElementById(`option-${i}`).value);
        });

        // Find correct variant
        const selectedVariant = product.variants.find(v =>
          v.options.every((opt, i) => opt === selectedOptions[i])
        );

        if (!selectedVariant) {
          alert("Variant not found!");
          return;
        }

        // Add main product
        await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: selectedVariant.id, quantity: parseInt(qty) })
        });

        // Special rule: If Black + Medium â†’ also add Soft Winter Jacket
        if (selectedOptions.includes("Black") && selectedOptions.includes("Medium")) {
          const jacketHandle = "soft-winter-jacket"; // replace with actual handle
          const jacketResp = await fetch(`/products/${jacketHandle}.js`);
          const jacket = await jacketResp.json();
          const jacketVariant = jacket.variants[0]; // default variant
          await fetch("/cart/add.js", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: jacketVariant.id, quantity: 1 })
          });
        }

        alert("Added to cart!");
        popup.classList.add("hidden");
      });
    });
  });

  // Close popup
  closeBtn.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => { if (e.target === popup) popup.classList.add("hidden"); });
});
</script>
