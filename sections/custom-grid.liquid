{% schema %}
{
  "name": "Custom Grid ",
  "settings": [
    { "type": "product", "id": "product_1", "label": "Product 1" },
    { "type": "product", "id": "product_2", "label": "Product 2" },
    { "type": "product", "id": "product_3", "label": "Product 3" },
    { "type": "product", "id": "product_4", "label": "Product 4" },
    { "type": "product", "id": "product_5", "label": "Product 5" },
    { "type": "product", "id": "product_6", "label": "Product 6" }
  ],
  "presets": [
    { "name": "Custom Product Grid" }
  ]
}
{% endschema %}

<div class="product-grid">
  {% for i in (1..6) %}
    {% capture setting_id %}product_{{ i }}{% endcapture %}
    {% assign selected_handle = section.settings[setting_id] %}
    {% assign product = all_products[selected_handle] %}

    {% if product %}
      <div class="product-card" data-product-handle="{{ product.handle }}">
        {% if product.featured_image %}
          <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
        {% endif %}
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
        <button class="open-popup" data-handle="{{ product.handle }}">View Details</button>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="product-popup" class="popup hidden">
  <div class="popup-content">
    <span id="close-popup">&times;</span>
    <div id="popup-body"></div>
  </div>
</div>

<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
  margin: 40px 0;
}
.product-card {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 16px;
  text-align: center;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
.product-card img {
  max-width: 100%;
  border-radius: 6px;
}
.product-card h3 {
  font-size: 16px;
  margin: 10px 0;
}
.product-card button {
  margin-top: 8px;
  padding: 8px 14px;
  border: none;
  background: #111;
  color: #fff;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.3s;
}
.product-card button:hover {
  background: #444;
}
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
.popup.hidden { display: none; }
.popup-content {
  background: #fff;
  padding: 24px;
  border-radius: 8px;
  max-width: 500px;
  width: 100%;
  position: relative;
}
#close-popup {
  position: absolute;
  right: 16px; top: 12px;
  font-size: 20px;
  cursor: pointer;
}
#popup-body img {
  max-width: 100%;
  border-radius: 6px;
  margin-bottom: 12px;
}
#popup-body h2 { margin-bottom: 10px; }
#popup-body p { margin-bottom: 15px; }
#popup-body select {
  display: block;
  margin-bottom: 15px;
  padding: 6px;
}
#add-to-cart {
  padding: 10px 16px;
  background: #111;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
#add-to-cart:hover { background: #444; }
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const popup = document.getElementById("product-popup");
  const popupBody = document.getElementById("popup-body");
  const closePopup = document.getElementById("close-popup");

  // Open popup
  document.querySelectorAll(".open-popup").forEach(btn => {
    btn.addEventListener("click", function() {
      const handle = this.dataset.handle;
      const product = window.all_products[handle];

      if (product) {
        let variantsHtml = "";
        if (product.variants && product.variants.length > 1) {
          variantsHtml = `<label for="variant-select">Choose an option:</label>
                          <select id="variant-select">`;
          product.variants.forEach(v => {
            variantsHtml += `<option value="${v.id}">${v.title} - ${Shopify.formatMoney(v.price)}</option>`;
          });
          variantsHtml += `</select>`;
        }

        popupBody.innerHTML = `
          <img src="${product.featured_image}" alt="${product.title}">
          <h2>${product.title}</h2>
          <p>${product.description}</p>
          ${variantsHtml}
          <button id="add-to-cart" data-id="${product.variants[0].id}">Add to Cart</button>
        `;

        popup.classList.remove("hidden");
      }
    });
  });

  // Close popup
  closePopup.addEventListener("click", () => popup.classList.add("hidden"));
  window.addEventListener("click", e => {
    if (e.target === popup) popup.classList.add("hidden");
  });

  // Handle Add to Cart
  document.addEventListener("click", function(e) {
    if (e.target && e.target.id === "add-to-cart") {
      let variantId = e.target.dataset.id;
      const variantSelect = document.getElementById("variant-select");
      if (variantSelect) {
        variantId = variantSelect.value;
      }

      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1
        })
      })
      .then(res => res.json())
      .then(data => {
        alert("‚úÖ Added to cart: " + data.title);

        // Special rule: If Black + Medium -> also add Soft Winter Jacket
        if (data.options && data.options.includes("Black") && data.options.includes("Medium")) {
          const softWinterJacket = window.all_products['soft-winter-jacket']; // üîë Replace handle if different
          if (softWinterJacket) {
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({
                id: softWinterJacket.variants[0].id,
                quantity: 1
              })
            });
          }
        }
      })
      .catch(err => {
        console.error("Cart error:", err);
        alert("‚ùå Could not add to cart");
      });
    }
  });
});
</script>
