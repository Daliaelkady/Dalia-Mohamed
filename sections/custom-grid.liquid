{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid"
    }
  ]
}
{% endschema %}

<div class="custom-grid">
  {% for block in section.blocks %}
    {% assign product = all_products[block.settings.product] %}
    {% if product %}
      <div class="product-card" data-handle="{{ product.handle }}">
        <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
        <button class="view-product" data-handle="{{ product.handle }}">View</button>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="popup" class="popup" style="display:none;">
  <div class="popup-content">
    <span class="popup-close">&times;</span>
    <div id="popup-body"></div>
  </div>
</div>

<style>
.custom-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}
.product-card {
  background: #fff;
  padding: 15px;
  border-radius: 8px;
  text-align: center;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
.product-card img {
  max-width: 100%;
  border-radius: 8px;
}
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.popup-content {
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
  position: relative;
}
.popup-close {
  position: absolute;
  top: 10px; right: 15px;
  cursor: pointer;
  font-size: 24px;
}
.btn {
  margin-top: 10px;
  padding: 10px 15px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const popup = document.getElementById("popup");
  const popupBody = document.getElementById("popup-body");

  document.querySelectorAll(".view-product").forEach(button => {
    button.addEventListener("click", function () {
      const handle = this.getAttribute("data-handle");

      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          let variantOptions = "";

          if (product.variants.length > 1) {
            variantOptions += '<form id="popup-form">';
            product.options.forEach((option, i) => {
              variantOptions += `<label>${option}</label><select name="option${i+1}">`;

              const uniqueValues = [...new Set(product.variants.map(v => v[`option${i+1}`]))];
              uniqueValues.forEach(value => {
                variantOptions += `<option value="${value}">${value}</option>`;
              });

              variantOptions += "</select>";
            });
            variantOptions += `<button type="submit" class="btn">Add to Cart</button></form>`;
          } else {
            variantOptions += `<form id="popup-form">
                                 <input type="hidden" name="id" value="${product.variants[0].id}">
                                 <button type="submit" class="btn">Add to Cart</button>
                               </form>`;
          }

          popupBody.innerHTML = `
            <h2>${product.title}</h2>
            <p><strong>${(product.price / 100).toFixed(2)} ${Shopify.currency.active}</strong></p>
            <p>${product.description}</p>
            ${variantOptions}
          `;

          popup.style.display = "flex";

          const form = document.getElementById("popup-form");
          form.addEventListener("submit", function (e) {
            e.preventDefault();

            let selectedVariantId;
            if (product.variants.length > 1) {
              const selectedOptions = product.options.map((_, i) => form[`option${i+1}`].value);
              const matchedVariant = product.variants.find(v =>
                selectedOptions.every((opt, i) => v[`option${i+1}`] === opt)
              );
              selectedVariantId = matchedVariant ? matchedVariant.id : product.variants[0].id;
            } else {
              selectedVariantId = product.variants[0].id;
            }

            const formData = new FormData();
            formData.append("id", selectedVariantId);
            formData.append("quantity", 1);

            fetch("/cart/add.js", { method: "POST", body: formData })
              .then(res => res.json())
              .then(data => {
                alert(`${product.title} has been added to your cart!`);
                popup.style.display = "none";

                // âœ… Special rule: if Black + Medium, also add Soft Winter Jacket
                if (product.options.length >= 2) {
                  const selectedOptions = product.options.map((_, i) => form[`option${i+1}`].value);
                  if (selectedOptions.includes("Black") && selectedOptions.includes("Medium")) {
                    fetch(`/products/soft-winter-jacket.js`)
                      .then(res => res.json())
                      .then(swProduct => {
                        const swVariantId = swProduct.variants[0].id;
                        const swFormData = new FormData();
                        swFormData.append("id", swVariantId);
                        swFormData.append("quantity", 1);
                        fetch("/cart/add.js", { method: "POST", body: swFormData });
                      });
                  }
                }
              })
              .catch(err => console.error(err));
          });

          document.querySelector(".popup-close").addEventListener("click", () => {
            popup.style.display = "none";
          });
        });
    });
  });
});
</script>
