{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid"
    }
  ]
}
{% endschema %}

<div class="custom-grid">
  {% for block in section.blocks %}
    {% if block.settings.product != blank %}
      {% assign product = all_products[block.settings.product] %}
      <div class="grid-item">
        <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
        <button class="details-btn" 
          data-handle="{{ product.handle }}">
          View Details
        </button>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="product-popup" class="popup-overlay">
  <div class="popup-content">
    <span id="popup-close">&times;</span>
    <div id="popup-body">
      <!-- Filled dynamically -->
    </div>
  </div>
</div>

<style>
/* Grid styling */
.custom-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 20px;
  padding: 30px;
}
.grid-item {
  background: #fff;
  border-radius: 12px;
  padding: 15px;
  text-align: center;
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}
.grid-item img {
  max-width: 100%;
  border-radius: 10px;
}
.grid-item h3 {
  font-size: 18px;
  margin: 10px 0 5px;
}
.grid-item p {
  color: #333;
  margin-bottom: 10px;
}
.details-btn {
  background: #000;
  color: #fff;
  border: none;
  padding: 10px 16px;
  border-radius: 8px;
  cursor: pointer;
  transition: 0.3s;
}
.details-btn:hover {
  background: #444;
}

/* Popup styling */
.popup-overlay {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.6);
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.popup-content {
  background: #fff;
  padding: 20px;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  position: relative;
}
#popup-close {
  position: absolute;
  top: 10px; right: 15px;
  font-size: 24px;
  cursor: pointer;
}
#popup-body img {
  max-width: 100%;
  border-radius: 8px;
  margin-bottom: 15px;
}
.variant-select {
  margin: 10px 0;
  width: 100%;
  padding: 8px;
  border-radius: 6px;
}
.add-to-cart-btn {
  margin-top: 15px;
  width: 100%;
  padding: 12px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}
.add-to-cart-btn:hover {
  background: #444;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("product-popup");
  const popupBody = document.getElementById("popup-body");
  const popupClose = document.getElementById("popup-close");

  // Open popup with product details
  document.querySelectorAll(".details-btn").forEach(btn => {
    btn.addEventListener("click", async () => {
      const handle = btn.dataset.handle;

      // Fetch product JSON
      const res = await fetch(`/products/${handle}.js`);
      const product = await res.json();

      // Build variants dropdown
      let variantsHTML = "";
      if (product.variants.length > 1) {
        variantsHTML = `
          <select id="variant-select" class="variant-select">
            ${product.variants.map(v => `
              <option value="${v.id}">${v.title} - ${Shopify.formatMoney(v.price)}</option>
            `).join("")}
          </select>
        `;
      } else {
        variantsHTML = `<input type="hidden" id="variant-select" value="${product.variants[0].id}">`;
      }

      // Fill popup body
      popupBody.innerHTML = `
        <img src="${product.featured_image}" alt="${product.title}">
        <h2>${product.title}</h2>
        <p><strong>Price:</strong> ${Shopify.formatMoney(product.price)}</p>
        <p>${product.description}</p>
        ${variantsHTML}
        <button class="add-to-cart-btn" data-handle="${handle}">Add to Cart</button>
      `;

      popup.style.display = "flex";

      // Handle Add to Cart
      document.querySelector(".add-to-cart-btn").addEventListener("click", async () => {
        const variantId = document.getElementById("variant-select").value;

        // Add main product
        await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: variantId, quantity: 1 })
        });

        // Check condition: if variant contains "Black / Medium"
        const selectedVariant = product.variants.find(v => v.id == variantId);
        if (selectedVariant && selectedVariant.title.includes("Black") && selectedVariant.title.includes("Medium")) {
          // Add Soft Winter Jacket (replace handle if needed)
          const jacketRes = await fetch("/products/soft-winter-jacket.js");
          const jacket = await jacketRes.json();
          await fetch("/cart/add.js", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: jacket.variants[0].id, quantity: 1 })
          });
        }

        alert("Added to cart!");
        popup.style.display = "none";
      });
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.style.display = "none");
  popup.addEventListener("click", e => {
    if (e.target === popup) popup.style.display = "none";
  });
});
</script>
