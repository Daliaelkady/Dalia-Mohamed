{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid Popup",
      "blocks": [
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" }
      ]
    }
  ]
}
{% endschema %}

<div class="gp-grid">
  {% for block in section.blocks %}
    {% assign p = all_products[block.settings.product] %}
    {% if p %}
      <div class="gp-tile" data-handle="{{ p.handle }}">
        <div class="gp-tile__card">
          {% if p.featured_image %}
            <img class="gp-tile__img" src="{{ p.featured_image | image_url: width: 600 }}" alt="{{ p.title | escape }}">
          {% endif %}
          <div class="gp-tile__meta">
            <div class="gp-tile__title">{{ p.title }}</div>
            <div class="gp-tile__price">{{ p.price | money }}</div>
          </div>
        </div>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="gp-popup" class="gp-popup">
  <div class="gp-popup__content">
    <span id="gp-popup-close" class="gp-popup__close">&times;</span>
    <div class="gp-popup__body">
      <img id="gp-popup-img" class="gp-popup__img" alt="">
      <h2 id="gp-popup-title"></h2>
      <p id="gp-popup-price"></p>
      <p id="gp-popup-desc"></p>
      <form id="gp-popup-form">
        <div id="gp-popup-variants"></div>
        <button type="submit" class="gp-btn">Add to Cart</button>
      </form>
    </div>
  </div>
</div>

<style>
/* same CSS as your version */
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("gp-popup");
  const popupClose = document.getElementById("gp-popup-close");
  const popupImg = document.getElementById("gp-popup-img");
  const popupTitle = document.getElementById("gp-popup-title");
  const popupPrice = document.getElementById("gp-popup-price");
  const popupDesc = document.getElementById("gp-popup-desc");
  const popupVariants = document.getElementById("gp-popup-variants");
  const popupForm = document.getElementById("gp-popup-form");

  // Open popup
  document.querySelectorAll(".gp-tile").forEach(tile => {
    tile.addEventListener("click", async () => {
      const handle = tile.dataset.handle;
      if (!handle) return;

      const res = await fetch(`/products/${handle}.js`);
      const product = await res.json();

      popupTitle.textContent = product.title;
      popupPrice.textContent = Shopify.formatMoney(product.price, Shopify.money_format);
      popupDesc.textContent = product.description.replace(/<[^>]*>?/gm, '');
      popupImg.src = product.featured_image;

      // Variants
      popupVariants.innerHTML = "";
      if (product.variants.length > 1) {
        product.options_with_values.forEach((opt, idx) => {
          const label = document.createElement("label");
          label.textContent = opt.name;
          const sel = document.createElement("select");
          sel.name = "option" + (idx + 1);
          opt.values.forEach(val => {
            const o = document.createElement("option");
            o.value = val;
            o.textContent = val;
            sel.appendChild(o);
          });
          popupVariants.appendChild(label);
          popupVariants.appendChild(sel);
        });
      }

      popup.dataset.variants = JSON.stringify(product.variants);

      popup.style.display = "flex";
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.style.display = "none");
  window.addEventListener("click", e => { if (e.target === popup) popup.style.display = "none"; });

  // Add to cart
  popupForm.addEventListener("submit", async e => {
    e.preventDefault();

    const variants = JSON.parse(popup.dataset.variants);
    let selectedVariant = variants[0];

    // match variant from selects
    const selects = popupVariants.querySelectorAll("select");
    if (selects.length > 0) {
      variants.forEach(v => {
        if (v.options.every((opt, idx) => opt === selects[idx].value)) {
          selectedVariant = v;
        }
      });
    }

    // Add selected product
    await fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: selectedVariant.id, quantity: 1 })
    });

    // Special condition: Black + Medium â†’ also add Soft Winter Jacket
    if (selectedVariant.options.includes("Black") && selectedVariant.options.includes("Medium")) {
      const jacket = await fetch("/products/soft-winter-jacket.js").then(r => r.json());
      if (jacket && jacket.variants[0]) {
        await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: jacket.variants[0].id, quantity: 1 })
        });
      }
    }

    alert("Added to cart!");
    popup.style.display = "none";
  });
});
</script>
